/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StakeInfoStruct = {
  stake: BigNumberish;
  unstakeDelayBlocks: BigNumberish;
  withdrawStake: BigNumberish;
  withdrawBlock: BigNumberish;
};

export type StakeInfoStructOutput = [BigNumber, number, BigNumber, number] & {
  stake: BigNumber;
  unstakeDelayBlocks: number;
  withdrawStake: BigNumber;
  withdrawBlock: number;
};

export interface StakeManagerInterface extends utils.Interface {
  functions: {
    "addDeposit()": FunctionFragment;
    "addDepositTo(address)": FunctionFragment;
    "addStake(uint32)": FunctionFragment;
    "getStakeInfo(address)": FunctionFragment;
    "isStaked(address,uint256,uint256)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "unlockStake()": FunctionFragment;
    "unstakeDelayBlocks()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDepositTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isStaked",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeDelayBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDepositTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "StakeAdded(address,uint256,uint256)": EventFragment;
    "StakeUnlocking(address,uint256)": EventFragment;
    "StakeWithdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUnlocking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
}

export type StakeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { paymaster: string; totalStake: BigNumber; unstakeDelayBlocks: BigNumber }
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export type StakeUnlockingEvent = TypedEvent<
  [string, BigNumber],
  { paymaster: string; withdrawBlock: BigNumber }
>;

export type StakeUnlockingEventFilter = TypedEventFilter<StakeUnlockingEvent>;

export type StakeWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { paymaster: string; withdrawAddress: string; amount: BigNumber }
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export interface StakeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDepositTo(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStake(
      _unstakeDelayBlocks: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakeInfo(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<[StakeInfoStructOutput] & { stakeInfo: StakeInfoStructOutput }>;

    isStaked(
      paymaster: string,
      requiredStake: BigNumberish,
      requiredDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, number] & {
        stake: BigNumber;
        unstakeDelayBlocks: number;
        withdrawStake: BigNumber;
        withdrawBlock: number;
      }
    >;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeDelayBlocks(overrides?: CallOverrides): Promise<[number]>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDeposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDepositTo(
    target: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStake(
    _unstakeDelayBlocks: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakeInfo(
    paymaster: string,
    overrides?: CallOverrides
  ): Promise<StakeInfoStructOutput>;

  isStaked(
    paymaster: string,
    requiredStake: BigNumberish,
    requiredDelayBlocks: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, number] & {
      stake: BigNumber;
      unstakeDelayBlocks: number;
      withdrawStake: BigNumber;
      withdrawBlock: number;
    }
  >;

  unlockStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeDelayBlocks(overrides?: CallOverrides): Promise<number>;

  withdrawStake(
    withdrawAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDeposit(overrides?: CallOverrides): Promise<void>;

    addDepositTo(target: string, overrides?: CallOverrides): Promise<void>;

    addStake(
      _unstakeDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakeInfo(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<StakeInfoStructOutput>;

    isStaked(
      paymaster: string,
      requiredStake: BigNumberish,
      requiredDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, number] & {
        stake: BigNumber;
        unstakeDelayBlocks: number;
        withdrawStake: BigNumber;
        withdrawBlock: number;
      }
    >;

    unlockStake(overrides?: CallOverrides): Promise<void>;

    unstakeDelayBlocks(overrides?: CallOverrides): Promise<number>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StakeAdded(address,uint256,uint256)"(
      paymaster?: string | null,
      totalStake?: null,
      unstakeDelayBlocks?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      paymaster?: string | null,
      totalStake?: null,
      unstakeDelayBlocks?: null
    ): StakeAddedEventFilter;

    "StakeUnlocking(address,uint256)"(
      paymaster?: string | null,
      withdrawBlock?: null
    ): StakeUnlockingEventFilter;
    StakeUnlocking(
      paymaster?: string | null,
      withdrawBlock?: null
    ): StakeUnlockingEventFilter;

    "StakeWithdrawn(address,address,uint256)"(
      paymaster?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      paymaster?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;
  };

  estimateGas: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDepositTo(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStake(
      _unstakeDelayBlocks: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakeInfo(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStaked(
      paymaster: string,
      requiredStake: BigNumberish,
      requiredDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDepositTo(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStake(
      _unstakeDelayBlocks: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStaked(
      paymaster: string,
      requiredStake: BigNumberish,
      requiredDelayBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeDelayBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
