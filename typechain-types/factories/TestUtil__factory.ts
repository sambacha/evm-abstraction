/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestUtil, TestUtilInterface } from "../TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "paymaster",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "paymasterData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "packUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "paymaster",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "paymasterData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "prefund",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637c12776c1461003b578063929c1b2414610064575b600080fd5b61004e61004936600461014d565b610085565b60405161005b9190610189565b60405180910390f35b61007761007236600461014d565b610096565b60405190815260200161005b565b6060610090826100a1565b92915050565b6000610090826100e0565b60603660006100b46101608501856101de565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b60006100eb82610105565b61009090608084013560a08501350160c08501350161022c565b600060e082013561010083013580821415610121575092915050565b61012d82488301610135565b949350505050565b60008183106101445781610146565b825b9392505050565b60006020828403121561015f57600080fd5b813567ffffffffffffffff81111561017657600080fd5b8201610180818503121561014657600080fd5b600060208083528351808285015260005b818110156101b65785810183015185820160400152820161019a565b818111156101c8576000604083870101525b50601f01601f1916929092016040019392505050565b6000808335601e198436030181126101f557600080fd5b83018035915067ffffffffffffffff82111561021057600080fd5b60200191503681900382131561022557600080fd5b9250929050565b600081600019048311821515161561025457634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220c588475a429ff763978ec5090d058d4aca45d835ca9256d28a15dab02690403c64736f6c63430008070033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
