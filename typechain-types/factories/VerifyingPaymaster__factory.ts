/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VerifyingPaymaster,
  VerifyingPaymasterInterface,
} from "../VerifyingPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract EntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifyingSigner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract EntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "paymaster",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "paymasterData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "requiredPreFund",
        type: "uint256",
      },
    ],
    name: "verifyPaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifyingSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516107c03803806107c083398101604081905261002f9161004d565b6001600160601b0319606092831b8116608052911b1660a05261009f565b6000806040838503121561006057600080fd5b825161006b81610087565b602084015190925061007c81610087565b809150509250929050565b6001600160a01b038116811461009c57600080fd5b50565b60805160601c60a05160601c6106e26100de600039600081816061015261038d01526000818161010401528181610128015261015801526106e26000f3fe60806040526004361061004a5760003560e01c806323d9ac9b1461004f5780635a627dbc146100a057806380fd44d5146100aa578063a9a23409146100d7578063b0d691fe146100f2575b600080fd5b34801561005b57600080fd5b506100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a8610126565b005b3480156100b657600080fd5b506100ca6100c5366004610582565b610240565b60405161009791906105f3565b3480156100e357600080fd5b506100a861004a3660046104f3565b3480156100fe57600080fd5b506100837f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630396cb60347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e7c350e36040518163ffffffff1660e01b815260040160206040518083038186803b1580156101af57600080fd5b505afa1580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e791906105cd565b6040516001600160e01b031960e085901b16815263ffffffff9190911660048201526024016000604051808303818588803b15801561022557600080fd5b505af1158015610239573d6000803e3d6000fd5b5050505050565b6060600061024d84610428565b9050604161025f610140860186610648565b905010156102da5760405162461bcd60e51b815260206004820152603d60248201527f566572696679696e675061796d61737465723a20696e76616c6964207369676e60448201527f6174757265206c656e67746820696e207061796d61737465724461746100000060648201526084015b60405180910390fd5b6000806102eb610140870187610648565b8101906102f891906104d1565b9092509050600061030d610140880188610648565b604081811061031e5761031e610696565b604080516000815260208101808352899052939091013560f81c9083018190526060830186905260808301859052925060019160a00190506020604051602081039080840390855afa158015610378573d6000803e3d6000fd5b505050602060405103516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461040e5760405162461bcd60e51b815260206004820152602360248201527f566572696679696e675061796d61737465723a2077726f6e67207369676e617460448201526275726560e81b60648201526084016102d1565b505060408051602081019091526000815295945050505050565b60006104338261048b565b80516020918201206040517f19457468657265756d205369676e6564204d6573736167653a0a33320000000092810192909252603c820152605c01604051602081830303815290604052805190602001209050919050565b606036600061049e610160850185610648565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b9392505050565b600080604083850312156104e457600080fd5b50508035926020909101359150565b6000806000806060858703121561050957600080fd5b84356003811061051857600080fd5b9350602085013567ffffffffffffffff8082111561053557600080fd5b818701915087601f83011261054957600080fd5b81358181111561055857600080fd5b88602082850101111561056a57600080fd5b95986020929092019750949560400135945092505050565b6000806040838503121561059557600080fd5b823567ffffffffffffffff8111156105ac57600080fd5b830161018081860312156105bf57600080fd5b946020939093013593505050565b6000602082840312156105df57600080fd5b815163ffffffff811681146104ca57600080fd5b600060208083528351808285015260005b8181101561062057858101830151858201604001528201610604565b81811115610632576000604083870101525b50601f01601f1916929092016040019392505050565b6000808335601e1984360301811261065f57600080fd5b83018035915067ffffffffffffffff82111561067a57600080fd5b60200191503681900382131561068f57600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212207588bb1bcbb116f5d9d9437a4d6c3767483415ad86f386c4f2191f14b1544c6f64736f6c63430008070033";

type VerifyingPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifyingPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifyingPaymaster__factory extends ContractFactory {
  constructor(...args: VerifyingPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _entryPoint: string,
    _verifyingSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerifyingPaymaster> {
    return super.deploy(
      _entryPoint,
      _verifyingSigner,
      overrides || {}
    ) as Promise<VerifyingPaymaster>;
  }
  getDeployTransaction(
    _entryPoint: string,
    _verifyingSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _entryPoint,
      _verifyingSigner,
      overrides || {}
    );
  }
  attach(address: string): VerifyingPaymaster {
    return super.attach(address) as VerifyingPaymaster;
  }
  connect(signer: Signer): VerifyingPaymaster__factory {
    return super.connect(signer) as VerifyingPaymaster__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifyingPaymasterInterface {
    return new utils.Interface(_abi) as VerifyingPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifyingPaymaster {
    return new Contract(address, _abi, signerOrProvider) as VerifyingPaymaster;
  }
}
